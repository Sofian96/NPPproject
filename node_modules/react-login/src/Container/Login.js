import React, { Component } from 'react'
import { browserHistory,hashHistory } from 'react-router'

import { Fonts, Colors, images, ApplicationStyles } from '../themes'
import { StyleSheet, css } from 'aphrodite'
import { Modal, Toast } from 'antd-mobile'

import NavTitle from '../Component/NavTitle.js'
import { My, Line } from '../Component/themes.js'

import { appService, appInfo } from '../service'



class Login extends Component {
  constructor(props) {
    super(props)
    this.loginout = this.loginout.bind(this)
    this.state = {
      visible: false,
      isDisplay: false,
      //nicknameValue:''
    }
    this.createResource = this.createResource.bind(this)
    this.patchResource = this.patchResource.bind(this)
    this.changeImage = this.changeImage.bind(this)
  }

  loginout() {
    let url = `${appInfo.address.logout}`
    if (localStorage.getItem('token')) {
      appService.request(url, null, true, 'POST')
        .then((result) => {
            localStorage.removeItem('token')
            localStorage.removeItem('userId')
            console.log('token',localStorage.getItem('token'))
            browserHistory.push({
              pathname: '/'
            })
          }
        )
        .catch(error => {
          }
        )
    }
  }

  //修改密码
  createResource(password1, password2) {
    this.values = {
      password1: password1,
      password2: password2,
    }
    console.log('this.values', this.values)
    let url = `${appInfo.address.changePassword}`
    appService.request(url,
      JSON.stringify(this.values), true, 'POST')
      .then((result) => {
          this.onClose()
          hashHistory.push({
            pathname: '/enter'
          })
        }
      )
      .catch(error => {
        }
      )
  }

  patchResource(nickname) {
    this.values = {
      nickname: nickname,
    }
    console.log('this.values', this.values)
    let url = `${appInfo.address.me}`
    appService.request(url,
      JSON.stringify(this.values), true, 'PATCH')
      .then((result) => {
          localStorage.setItem('userName', result.nickname)
          Toast.info('修改昵称成功',1)
        }
      )
      .catch(error => {
        }
      )
  }

  changeImage(avatar) {
    this.values = {
      avatar: avatar,
    }
    console.log('test')
    console.log('this.values', this.values)
    let url = `${appInfo.address.me}`
    Toast.loading('请稍等...')
    appService.request(url,
      JSON.stringify(this.values), true, 'PATCH')
      .then((result) => {
          localStorage.setItem('avatar',result.avatar)
          //Toast.success('修改成功', 1)
          Toast.hide()
        }
      )
      .catch(error => {
          Toast.fail('修改失败', 1)
        }
      )
  }

  showModal = (e) => {
    e.preventDefault(); // 修复 Android 上点击穿透
    this.setState({
      visible: true,
    });
  }

  onClose = () => {
    this.setState({
      visible: false,
      isDisplay: false,
    }).then(()=>{
      if(this.nickname){
        Toast.info('修改成功',1)
      }
    })
  }

  render() {
    return (
      <div>
        <Modal
          transparent
          maskClosable={false}
          closable={false}
          visible={this.state.isDisplay}
          onClose={this.onClose}
          footer={[{
            text: '确定', onPress: () => {
              this.onClose()
            }
          }]} >
          <div
            style={{
              width: '80%',
              height: '100%',
              border: '1px solid rgba(139, 156, 172, 1)',
              borderRadius: '1.5rem',
              display: 'inline-Block',
              backgroundColor: Colors.background,
              padding: '0.2rem',
              boxSizing: 'border-box' }}>
            <input
              style={{
                width: '100%',
                border: 'none',
                color: '#666',
                textAlign: 'center' }}
              placeholder='请输入昵称'
              maxLength={10}
              //value={this.state.nicknameValue}
              onChange={
                (event) => {
                  // 	this.setState({
                  // 			nicknameValue:event.target.value
                  // 	})
                  //   if(event.target.value&&event.target.value.length<=10){
                  // 		this.setState({
                  // 		nicknameValue:event.target.value
                  // 	})
                  // 	}
                  //   else{
                  // 			this.setState({
                  // 			nicknameValue:event.target.value.substring(0,10)
                  // 	})
                  //  }
                  // this.nickname=this.state.nicknameValue
                  this.nickname=event.target.value
                }
              }

              onBlur={
                (event)=>{
                  this.patchResource(this.nickname)
                }
              }
            />
          </div>
        </Modal>
        <Modal
          transparent
          maskClosable={false}
          closable={false}
          visible={this.state.visible}
          onClose={this.onClose}
          footer={[{
            text: '确定', onPress: () => {
              if (this.editPassword1 === this.editPassword2 && this.editPassword1 && this.editPassword2) {
                this.createResource(this.editPassword1, this.editPassword2)
              }
              else {
                this.onClose()
              }

            }
          }]}
        >
          <div
            style={{
              width: '80%',
              height: '100%',
              border: '1px solid rgba(139, 156, 172, 1)',
              borderRadius: '1.5rem',
              display: 'inline-Block',
              backgroundColor: Colors.background,
              padding: '0.2rem',
              boxSizing: 'border-box' }}>
            <input
              style={{
                width: '100%',
                border: 'none',
                color: '#666',
                textAlign: 'center' }}
              placeholder='请输入密码'
              type='password'
              onBlur={
                (event) => {
                  this.editPassword1 = event.target.value
                  if (this.editPassword1.length < 6) {
                    Toast.info('请输入6位密码', 1)
                  }
                }
              }
            />
          </div>
          <div
            style={{
              width: '80%',
              height: '100%',
              marginTop: '0.3rem',
              border: '1px solid rgba(139, 156, 172, 1)',
              borderRadius: '1.5rem',
              display: 'inline-Block',
              backgroundColor: Colors.background,
              padding: '0.2rem',
              boxSizing: 'border-box' }}>
            <input
              style={{
                width: '100%',
                border: 'none',
                color: '#666',
                textAlign: 'center' }}
              placeholder='请再次输入密码'
              type='password'
              onBlur={
                (event) => {
                  this.editPassword2 = event.target.value
                  if (this.editPassword1 !== this.editPassword2) {
                    Toast.info('两次密码输入不一致,请重新输入', 1)
                  }
                }
              }
            />
          </div>
        </Modal>
        <NavTitle title='设置' />
        <Line height='0.2rem' backgroundColor='rgba(242, 242, 242, 1)' />
        <My title='修改昵称' display={true} onClick={() => { this.setState({ isDisplay: true }) }} />
        <My title='修改密码' display={true} onClick={() => { this.setState({ visible: true }) }} />
        <My
          title='修改头像'
          display={true}
          children={
            <div style={{ position: 'absolute', left: '0.33rem', top: 0, opacity: 0,width:'100%' }}>
              <input
                type="file"
                name='file'
                id='file'
                accept=".gif,.jpg,.jpeg,.png"
                onChange={(event) => {
                  let reader = new FileReader()
                  reader.onload = function(upload) {
                    //console.log('reader:%o', upload.target.result)
                    this.changeImage(upload.target.result)
                  }.bind(this)
                  reader.readAsDataURL(event.target.files[0])
                }}
              />
            </div>
          }
        />
        <div
          className={css(styles.enroll)}
          onClick={
            () => {
              this.loginout()
            }
          }
        >退出登录</div>
      </div>
    )
  }
}

const styles = StyleSheet.create({
  enroll: ApplicationStyles.enroll
})

export default Login